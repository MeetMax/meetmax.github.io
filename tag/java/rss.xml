<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>meetmax.cn</title>
   
   <link></link>
   <description>Stay Hungry , Stay Foolish</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Java学习笔记(五) - 访问控制</title>
	  <link>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%94)-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6</link>
	  <author></author>
	  <pubDate>2018-09-01T00:00:00+08:00</pubDate>
	  <guid>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%94)-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6</guid>
	  <description><![CDATA[
	     <h2 id="访问级别修饰符">访问级别修饰符</h2>
<p>一个类的成员变量或方法是否能被其它类访问到取决于访问级别的修饰符，Java有四种级别的访问修饰符，分别是<code class="highlighter-rouge">public</code>,<code class="highlighter-rouge">protected</code>,<code class="highlighter-rouge">package-private</code>(没有修饰符)，<code class="highlighter-rouge">private</code>，访问级别逐级降低。</p>

<p>下表表示每个修饰符的访问权限。</p>

<table>
  <thead>
    <tr>
      <th>Modifier</th>
      <th>Class</th>
      <th>Package</th>
      <th>Subclass</th>
      <th>World</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>public</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
    </tr>
    <tr>
      <td>protected</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
    </tr>
    <tr>
      <td>no modifier</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
      <td>N</td>
    </tr>
    <tr>
      <td>protected</td>
      <td>Y</td>
      <td>N</td>
      <td>N</td>
      <td>N</td>
    </tr>
  </tbody>
</table>

<p>第一列表示类成员在类的内部是否能被访问，第二列表示类成员在同一个包内的不同类的是否能把访问到，第三列表上类成员在包外部的子类是否能访问到，第四列表示类成员是否能被任意包的任意类访问到，是最高的访问权限。
在成员不加访问修饰符的情况下，该成员的访问级别是<code class="highlighter-rouge">package-private</code>。</p>

<h2 id="访问级别的选择">访问级别的选择</h2>
<ul>
  <li>我们应该尽量选择最严格的访问权限控制符，在能用<code class="highlighter-rouge">private</code>的时候就不要用<code class="highlighter-rouge">public</code>，除非真的有特别的需要，这样可以避免一些滥用成员的错误。</li>
  <li>尽量避免使用<code class="highlighter-rouge">public</code>修饰符，除非该成员是常量，即使用了<code class="highlighter-rouge">final</code>修饰符。</li>
</ul>

<h2 id="参考">参考</h2>
<p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html">The Java™ Tutorials</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Java学习笔记(四) - 类</title>
	  <link>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)-%E7%B1%BB</link>
	  <author></author>
	  <pubDate>2018-08-28T00:00:00+08:00</pubDate>
	  <guid>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)-%E7%B1%BB</guid>
	  <description><![CDATA[
	     <h2 id="声明类">声明类</h2>
<p>Java的类可以通过<code class="highlighter-rouge">class</code>关键词，<code class="highlighter-rouge">{}</code>大括号来声明，在<code class="highlighter-rouge">{}</code>大括号中间是类的<code class="highlighter-rouge">body</code>体，在<code class="highlighter-rouge">body</code>体内可声明成员变量、方法和构造函数等等。另外，也可以在<code class="highlighter-rouge">class</code>前面加上修饰符<code class="highlighter-rouge">private</code>或<code class="highlighter-rouge">public</code>，修饰符的作用是访问控制，前者说明该类是私有类，其它类不能访问它，后者是公开的，任何类都可以访问它，下面是公开类的声明示例。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Myclass</span> <span class="o">{</span>
	<span class="c1">// 这里可以声明成员变量</span>
	<span class="c1">// 方法、构造函数等</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上面是一个简单类的声明，类还可通过关键词<code class="highlighter-rouge">extends</code>继承其它类，通过关键词<code class="highlighter-rouge">implements</code>继承多个接口，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyClass</span> <span class="kd">extends</span> <span class="n">MySuperClass</span> <span class="kd">implements</span> <span class="n">YourInterface</span><span class="o">,</span><span class="n">YourInterface2</span> <span class="o">{</span>
    <span class="c1">// field, constructor, and</span>
    <span class="c1">// method declarations</span>
<span class="o">}</span>
</code></pre></div></div>

<p>通常，类的声明包含以下几个部分：</p>

<ol>
  <li>修饰符，例如<code class="highlighter-rouge">public</code>，<code class="highlighter-rouge">private</code>，<code class="highlighter-rouge">protected</code>等。</li>
  <li>类的名称，按照规范，类名首字母大写(非必须)，增加可读性</li>
  <li>可通过关键词<code class="highlighter-rouge">extends</code>继承<code class="highlighter-rouge">超类</code>，且只能继承一个<code class="highlighter-rouge">超类</code>，Java不支持多继承</li>
  <li>可通过关键词<code class="highlighter-rouge">implements</code>继承接口，Java接口支持多继承，接口之间用<code class="highlighter-rouge">,</code>逗号分隔。</li>
  <li>类的<code class="highlighter-rouge">body</code>体，在<code class="highlighter-rouge">{}</code>大括号之间。</li>
</ol>

<h2 id="声明成员变量">声明成员变量</h2>
<p>成员变量是指在类的内部，且不在<code class="highlighter-rouge">方法</code><code class="highlighter-rouge">块</code>内，且不是方法的参数，下面是声明成员变量的示例：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Myclass</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="n">String</span> <span class="n">hello</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上面的代码中，<code class="highlighter-rouge">hello</code>就是一个公开的，<code class="highlighter-rouge">String</code>类型的成员变量，成员变量一般由以下3部分组成：</p>

<ol>
  <li>0或多个修饰符，例如<code class="highlighter-rouge">private</code>或<code class="highlighter-rouge">public</code></li>
  <li>字段类型</li>
  <li>字段名称</li>
</ol>

<h2 id="方法声明">方法声明</h2>

<p>下面是一个方法声明的例子：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Myclass</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">double</span> <span class="nf">calculateAnswer</span><span class="o">(</span><span class="kt">double</span> <span class="n">wingSpan</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numberOfEngines</span><span class="o">,</span><span class="kt">double</span> <span class="n">length</span><span class="o">,</span> <span class="kt">double</span> <span class="n">grossTons</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">//do the calculation here</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>方法声明由以下6部分组成:</p>
<ol>
  <li>修饰符-例如<code class="highlighter-rouge">public</code>,<code class="highlighter-rouge">private</code></li>
  <li>返回值的类型，如果没有返回值则声明为<code class="highlighter-rouge">void</code></li>
  <li>方法名</li>
  <li>方法的参数，在<code class="highlighter-rouge">()</code>内声明，多个参数之间用<code class="highlighter-rouge">,</code>逗号隔开，如果没有参数，就是用空的<code class="highlighter-rouge">()</code></li>
  <li>一个异常列表</li>
  <li>方法的<code class="highlighter-rouge">body</code>，在<code class="highlighter-rouge">{}</code>之间包含了方法代码和局部变量等。</li>
</ol>

<h3 id="方法签名">方法签名</h3>
<p><strong>方法签名</strong> 包括方法名称和参数类型，在上面代码中，它的方法签名是</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">calculateAnswer</span><span class="o">(</span><span class="kt">double</span><span class="o">,</span> <span class="kt">int</span><span class="o">,</span> <span class="kt">double</span><span class="o">,</span> <span class="kt">double</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="方法重载">方法重载</h3>
<p>在同一个类里可以有相同名称的方法，只要它们的方法签名不同，Java编译器可以根据方法签名判断出你要调用的具体方法，例如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DataArtist</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="kt">double</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">double</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上面代码中有4个名为<code class="highlighter-rouge">draw</code>的方法，在调用的时候，Java编译器可根据参数类型区分出调用的是哪个方法，在同一个类中不能声明具有相同名称、相同的参数数量和相同参数类型的方法，即使他们返回类型不一样，因为Java编译器无法识别出调用的是哪个方法。</p>

<h2 id="类的构造函数">类的构造函数</h2>
<p>每个类都包含构造函数，构造函数在创建对象时被调用，构造函数的声明和方法的声明很像，除了构造函数没有返回值，且函数名必须和类名一样。例如<code class="highlighter-rouge">Bicycle</code>类有一个构造函数</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">Bicycle</span><span class="o">(</span><span class="kt">int</span> <span class="n">startCadence</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startSpeed</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startGear</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">gear</span> <span class="o">=</span> <span class="n">startGear</span><span class="o">;</span>
    <span class="n">cadence</span> <span class="o">=</span> <span class="n">startCadence</span><span class="o">;</span>
    <span class="n">speed</span> <span class="o">=</span> <span class="n">startSpeed</span><span class="o">;</span>
<span class="o">}</span><span class="kd">public</span> <span class="nf">Bicycle</span><span class="o">(</span><span class="kt">int</span> <span class="n">st</span>
</code></pre></div></div>

<p>可以通过<code class="highlighter-rouge">new</code>操作符创建<code class="highlighter-rouge">Bicycle</code>的对象，并初始化相关的字段。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Bicycle</span> <span class="n">myBike</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bicycle</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">8</span><span class="o">);</span>
</code></pre></div></div>

<p>和方法重载一样，一个类可以有多个构造函数，只要它们的方法签名不一样。例如，下面是一个无参数的构造函数</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">Bicycle</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">gear</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="n">cadence</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
    <span class="n">speed</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="方法中的参数传递">方法中的参数传递</h2>
<p>在Java中数据分为2种类型即，原始数据类型和引用数据类型，数据在传递给方法时，2种数据类型的传递方式是不同的。</p>

<h3 id="原始数据类型的传递">原始数据类型的传递</h3>
<p>原始数据类型是按值传递的，它传递的是该数据的值的拷贝，什么意思呢？请看下面的代码，假设我把值<code class="highlighter-rouge">99.00</code>传给<code class="highlighter-rouge">computePayment</code>方法，方法在内部把我传入的值修改变成了100，但是这个修改仅仅在方法内部有效，方法到<code class="highlighter-rouge">return</code>就结束了，在方法外部，我的值还是<code class="highlighter-rouge">99.00</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">double</span> <span class="nf">computePayment</span><span class="o">(</span><span class="kt">double</span> <span class="n">loanAmt</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">double</span> <span class="n">loanAmt</span> <span class="o">=</span> <span class="mf">100.0</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">loanAmt</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="引用类型的传递">引用类型的传递</h3>
<p>引用类型的数据是按引用传递的，它传递的是该数据的内存地址的引用。什么意思呢？下面的代码中，我通过调用<code class="highlighter-rouge">circle</code>对象的<code class="highlighter-rouge">setX</code>和<code class="highlighter-rouge">setY</code>方法，对它的成员变量<code class="highlighter-rouge">x</code>和<code class="highlighter-rouge">y</code>进行了修改，和值传递不同的是，它的修改是永久的，当方法运行结束，该修改仍然有效。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveCircle</span><span class="o">(</span><span class="n">Circle</span> <span class="n">circle</span><span class="o">,</span> <span class="kt">int</span> <span class="n">deltaX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">deltaY</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// code to move origin of circle to x+deltaX, y+deltaY</span>
    <span class="n">circle</span><span class="o">.</span><span class="na">setX</span><span class="o">(</span><span class="n">circle</span><span class="o">.</span><span class="na">getX</span><span class="o">()</span> <span class="o">+</span> <span class="n">deltaX</span><span class="o">);</span>
    <span class="n">circle</span><span class="o">.</span><span class="na">setY</span><span class="o">(</span><span class="n">circle</span><span class="o">.</span><span class="na">getY</span><span class="o">()</span> <span class="o">+</span> <span class="n">deltaY</span><span class="o">);</span>
        
    <span class="c1">// code to assign a new reference to circle</span>
    <span class="n">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Circle</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="参考">参考</h2>
<p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html">The Java™ Tutorials</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Java学习笔记(三) - 表达式、语句和块</title>
	  <link>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%9D%97</link>
	  <author></author>
	  <pubDate>2018-08-28T00:00:00+08:00</pubDate>
	  <guid>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)-%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%9D%97</guid>
	  <description><![CDATA[
	     <h2 id="表达式">表达式</h2>
<p>表达式是由变量、操作符和方法调用组成的一个就算过程，它一定有单个的返回值，下面是表达式的例子：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">code</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

<span class="k">if</span> <span class="o">(</span><span class="n">value1</span> <span class="o">==</span> <span class="n">value2</span><span class="o">)</span> 
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value1 == value2"</span><span class="o">);</span>
</code></pre></div></div>

<p>在上面的示例中，<code class="highlighter-rouge">code = 1</code>是一个表达式，它返回一个<code class="highlighter-rouge">int</code>类型的值，表达式的返回值也可以是其它类型，<code class="highlighter-rouge">value1 == value2</code>是一个返回布尔值的表达式。Java语言也可以通过各种较小的表达式构成符合表达式，如下所示：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">3</span>
</code></pre></div></div>

<h2 id="语句">语句</h2>
<p>通俗的讲语句就是自然语言中的句子。一条一句是一个完整的执行单元，表达是是语句的一部分，下面这些类型的表达式，在其后面加上分号就变成语句了。</p>

<ul>
  <li>
    <p>赋值表达式</p>
  </li>
  <li>
    <p>使用了<code class="highlighter-rouge">++</code>或者<code class="highlighter-rouge">--</code>的表达式</p>
  </li>
  <li>
    <p>方法调用</p>
  </li>
  <li>
    <p>对象的创建</p>
  </li>
</ul>

<p>这些语句被称为表达式语句，下面是一些表达式语句的例子。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// assignment statement</span>
<span class="n">aValue</span> <span class="o">=</span> <span class="mf">8933.234</span><span class="o">;</span>
<span class="c1">// increment statement</span>
<span class="n">aValue</span><span class="o">++;</span>
<span class="c1">// method invocation statement</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">);</span>
<span class="c1">// object creation statement</span>
<span class="n">Bicycle</span> <span class="n">myBike</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bicycle</span><span class="o">();</span>
</code></pre></div></div>

<p>另外，语句可以分为<code class="highlighter-rouge">声明语句</code>和<code class="highlighter-rouge">控制流语句</code>，上面的例子是<code class="highlighter-rouge">声明语句</code>，下面的示例是<code class="highlighter-rouge">控制流语句</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">===</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// do something</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="块">块</h2>
<p><strong>块</strong> 是语句的组合，在“块”的范围内可以有0或n个语句，<code class="highlighter-rouge">{}</code>花括号边上开始和结束，下面是块的示例。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nc">BlockDemo</span> <span class="o">{</span>
     <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="kt">boolean</span> <span class="n">condition</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 开始 块 1</span>
               <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Condition is true."</span><span class="o">);</span>
          <span class="o">}</span> <span class="c1">// 结束 块 one</span>
          <span class="k">else</span> <span class="o">{</span> <span class="c1">// 开始 块 2</span>
               <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Condition is false."</span><span class="o">);</span>
          <span class="o">}</span> <span class="c1">// 结束 块 2</span>
     <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="控制流语句">控制流语句</h2>
<p>控制流语分为3种，<strong>条件判断类型 ** (<code class="highlighter-rouge">if-then</code>,<code class="highlighter-rouge">if-then-else</code>,<code class="highlighter-rouge">switch</code>)、 **循环语句</strong> (<code class="highlighter-rouge">for</code>,<code class="highlighter-rouge">while</code>,<code class="highlighter-rouge">do-while</code>) 和 <strong>分支语句</strong> (<code class="highlighter-rouge">break</code>,<code class="highlighter-rouge">continue</code>,<code class="highlighter-rouge">return</code>)。</p>

<h3 id="条件判断语句">条件判断语句</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// if-then</span>
 <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">){</span> 
     <span class="c1">// then do something</span>
 <span class="o">}</span>
    
<span class="c1">// 省略括号的写法</span>
 <span class="k">if</span> <span class="o">(</span><span class="n">isMoving</span><span class="o">)</span>
      <span class="n">currentSpeed</span><span class="o">--;</span>

<span class="c1">// if-then-else </span>
<span class="k">if</span> <span class="o">(</span><span class="n">isMoving</span><span class="o">)</span> <span class="o">{</span>
       <span class="n">currentSpeed</span><span class="o">--;</span>
   <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">{</span>
       <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The bicycle has already stopped!"</span><span class="o">);</span>
   <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="c1">// do something</span>
<span class="o">}</span>
	
<span class="c1">// switch 语句</span>
<span class="kt">int</span> <span class="n">month</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
<span class="n">String</span> <span class="n">monthString</span><span class="o">;</span>
<span class="k">switch</span> <span class="o">(</span><span class="n">month</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>  <span class="n">monthString</span> <span class="o">=</span> <span class="s">"January"</span><span class="o">;</span>
             <span class="k">break</span><span class="o">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>  <span class="n">monthString</span> <span class="o">=</span> <span class="s">"February"</span><span class="o">;</span>
             <span class="k">break</span><span class="o">;</span>
    <span class="k">default</span><span class="o">:</span> <span class="n">monthString</span> <span class="o">=</span> <span class="s">"Invalid month"</span><span class="o">;</span>
             <span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
    
</code></pre></div></div>

<h3 id="循环语句">循环语句</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// while语句</span>
<span class="k">while</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="mi">11</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Count is: "</span> <span class="o">+</span> <span class="n">count</span><span class="o">);</span>
    <span class="n">count</span><span class="o">++;</span>
<span class="o">}</span>

<span class="c1">// do while语句</span>
<span class="k">do</span> <span class="o">{</span>
   <span class="n">statement</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
<span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">expression</span><span class="o">);</span>

<span class="c1">// for循环</span>
<span class="kd">class</span> <span class="nc">ForDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
         <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">11</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Count is: "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
         <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// for循环迭代的用法</span>
<span class="kd">class</span> <span class="nc">EnhancedForDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
         <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span> <span class="o">=</span> 
             <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">};</span>
         <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">item</span> <span class="o">:</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
             <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Count is: "</span> <span class="o">+</span> <span class="n">item</span><span class="o">);</span>
         <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="分支语句">分支语句</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrayOfInts</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">arrayOfInts</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">searchfor</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">foundIt</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// 跳出循环</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="参考">参考</h2>
<p><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/expressions.html">The Java™ Tutorials</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Java学习笔记(二) - 原始数据类型</title>
	  <link>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B</link>
	  <author></author>
	  <pubDate>2018-08-27T00:00:00+08:00</pubDate>
	  <guid>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)-%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B</guid>
	  <description><![CDATA[
	     <h2 id="原始数据类型">原始数据类型</h2>
<p>Java是静态类型语言，所以变量必须先声明才能使用，并且每个变量都有自己的类型和名称。原始值不与其他原始数据值共享状态，Java语言定义了8种原始数据类型。</p>
<ul>
  <li><strong>byte</strong>   字节类型，在内存中占8位，它的值的范围是<code class="highlighter-rouge">-128 ~ 127</code>(包含)，在需要节省内存的情况下，字节类型可用来保存大型数组。</li>
  <li><strong>short</strong>  类型在内存中占16位，它的值的范围是<code class="highlighter-rouge">-32,768 ~ 32,767 </code>，和<code class="highlighter-rouge">byte</code>类型一样，同样适用于需要节省内存的情况。</li>
  <li><strong>int</strong> 类型在内存中占32位，它的值的范围是<strong>-2<sup>31</sup> ~ 2<sup>31</sup> -1</strong>。Java8之后可以使用无符号的整数，它的范围是**0 ~ 2<sup>32</sup> **，<code class="highlighter-rouge">Integer</code>中增加了静态方法<code class="highlighter-rouge">compareUnsigned</code>,<code class="highlighter-rouge">divideUnsigned</code>等方法可支持无符号整数运算。</li>
  <li><strong>long</strong>类型在内存中占64位，它的取值范围是<strong>-2<sup>63</sup> ~ 2<sup>63</sup> -1</strong>，Java8之后也可以使用无符号整数，通过<code class="highlighter-rouge">Long</code>类提供的<code class="highlighter-rouge">compareUnsigned</code>、<code class="highlighter-rouge">divideUnsigned</code>方法支持无符号整数运算。</li>
  <li><strong>float</strong>为32位单精度浮点类型。</li>
  <li><strong>dobule</strong>类型为64位双精度浮点类型。</li>
  <li><strong>boolean</strong>布尔类型，有<code class="highlighter-rouge">true/false</code>两种类型，通常用于条件判断<code class="highlighter-rouge">true</code>表<code class="highlighter-rouge">是</code>,<code class="highlighter-rouge">false</code>表<code class="highlighter-rouge">否</code>。</li>
  <li><strong>char</strong> 字符类型是单个16位<code class="highlighter-rouge">Unicode</code>字符，它的值范围是<code class="highlighter-rouge">'\u0000'</code>~<code class="highlighter-rouge">'\uffff'</code>。</li>
</ul>

<h2 id="默认值">默认值</h2>
<p>类的全局变量声明之后不是必须被分配的。如果全局变量被声明了，但是没有初始化，它会被编译器设置一个默认值，可能是<code class="highlighter-rouge">0</code>或<code class="highlighter-rouge">null</code>，这取决于数据类型，不过，依赖于默认值被认为是一种糟糕的编程风格。下表总结了各种数据类型对应的默认值</p>

<table>
  <thead>
    <tr>
      <th>数据类型</th>
      <th>默认值</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>byte</td>
      <td>0</td>
    </tr>
    <tr>
      <td>short</td>
      <td>0</td>
    </tr>
    <tr>
      <td>int</td>
      <td>0</td>
    </tr>
    <tr>
      <td>long</td>
      <td>0L</td>
    </tr>
    <tr>
      <td>float</td>
      <td>0.0f</td>
    </tr>
    <tr>
      <td>double</td>
      <td>0.0d</td>
    </tr>
    <tr>
      <td>char</td>
      <td>‘\u0000’</td>
    </tr>
    <tr>
      <td>String(或者 任何对象)</td>
      <td>null</td>
    </tr>
    <tr>
      <td>boolean</td>
      <td>false</td>
    </tr>
  </tbody>
</table>

<p>对于局部变量则不同，编译器永远不会给局部变量分配默认值，如果你在声明时未对该变量进行初始化，在你使用该变量之前必须对其初始化，否则将导致编译错误。</p>

<h2 id="字面量-literals">字面量-Literals</h2>
<p>在初始化原始数据类型时不需要<code class="highlighter-rouge">new</code>关键词，因为原始数据类型是语言中内置的数据类型，字面量就是原始数据类型变量的等号右边的，固定的值，可以是字符串或数字。如下所示，<code class="highlighter-rouge">100</code>和<code class="highlighter-rouge">true</code>就是字面量。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
<span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</code></pre></div></div>
<p>字面量可以分为：</p>
<ul>
  <li><strong>整数字面量</strong></li>
  <li><strong>浮点数字面量</strong></li>
  <li><strong>字符串字面量</strong></li>
</ul>

<h2 id="参考">参考</h2>
<p><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">The Java™ Tutorials</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Java学习笔记(一) - 变量</title>
	  <link>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)-%E5%8F%98%E9%87%8F</link>
	  <author></author>
	  <pubDate>2018-08-26T00:00:00+08:00</pubDate>
	  <guid>//Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)-%E5%8F%98%E9%87%8F</guid>
	  <description><![CDATA[
	     <h2 id="变量">变量</h2>
<p>Java语言定义了4中类型的变量</p>

<ul>
  <li><strong>实例变量</strong></li>
</ul>

<p>实例变量本质上是 <strong>一个类的非晶态的全局变量</strong>，注意关键词，<strong>非晶态</strong>和<strong>全局</strong>。为什么叫实例变量呢？因为它的值在类的每个实例都是唯一的，实例就是指对象。下面的例子中，有一个<code class="highlighter-rouge">Box</code>类，定义了一个全局变量<code class="highlighter-rouge">numbers=1</code>，在这里<code class="highlighter-rouge">box1</code>是类<code class="highlighter-rouge">Box</code>的第1个实例，<code class="highlighter-rouge">box2</code>是第2个实例，<code class="highlighter-rouge">numbers</code>变量在这2个实例中是独立的，修改了实例<code class="highlighter-rouge">box1</code>中的变量<code class="highlighter-rouge">numbers</code>不会对<code class="highlighter-rouge">box2</code>实例中的<code class="highlighter-rouge">numbers</code>造成影响。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="n">numbers</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>

<span class="n">Box</span> <span class="n">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">();</span>
<span class="n">box1</span><span class="o">.</span><span class="na">numbers</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
<span class="n">Box</span> <span class="n">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">();</span> <span class="c1">// box2的numbers属性依然是1</span>
</code></pre></div></div>

<ul>
  <li><strong>类变量</strong></li>
</ul>

<p>类变量指的是<strong>一个类的静态全局变量</strong>，关键词是，<strong>静态</strong>和<strong>全局</strong>。为什么叫类变量呢？因为它是和实例(对象)无关的，不管一个类被实例化多少次，类变量都只有一份。静态变量通过<code class="highlighter-rouge">static</code>关键词来声明，对第1个例子稍作修改，<code class="highlighter-rouge">numbers</code>变成了类变量，<code class="highlighter-rouge">box1</code>调用<code class="highlighter-rouge">getNumbers</code>方法得到的值为1，然后我们把<code class="highlighter-rouge">numbers</code>的值改为了2，<code class="highlighter-rouge">box2</code>调用<code class="highlighter-rouge">getNumbers</code>的值变成了2，结果说明了<code class="highlighter-rouge">类变量</code>只和类有关 。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">numbers</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNumbers</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">Box</span><span class="o">.</span><span class="na">numbers</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="n">Box</span> <span class="n">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">();</span>
<span class="n">box1</span><span class="o">.</span><span class="na">getNumbers</span><span class="o">();</span><span class="c1">// 得到的值为1</span>
<span class="n">Box</span><span class="o">.</span><span class="na">numbers</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// 修改全局变量</span>
<span class="n">Box</span> <span class="n">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Box</span><span class="o">();</span> 
<span class="n">box2</span><span class="o">.</span><span class="na">getNumbers</span><span class="o">();</span> <span class="c1">// 得到的值为2</span>
</code></pre></div></div>

<ul>
  <li><strong>局部变量</strong></li>
</ul>

<p>Java中的局部变量是指<strong>类的方法内部的变量</strong>，局部变量仅在方法内部可见，在类的外部无法被访问到，通常用于存储一个方法的临时状态，在方法执行完成后，会自动释放掉。如下所示<code class="highlighter-rouge">getNumbers</code>方法中的<code class="highlighter-rouge">numbers</code>就是局部变量。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNumbers</span><span class="o">()</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">numbers</span> <span class="o">=</span> <span class="mi">1</span>
		<span class="k">return</span> <span class="n">numbers</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<ul>
  <li><strong>参数</strong></li>
</ul>

<p>参数变量是指方法中的参数，它的作用域和局部变量一样，仅在方法内有效，可以接受来自外部的数据。如下所示，<code class="highlighter-rouge">numbers</code>作为<code class="highlighter-rouge">getNumbers</code>方法的参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">getNumbers</span><span class="o">(</span><span class="kt">int</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="命名规范">命名规范</h2>
<ul>
  <li>变量命名大小写敏感，不限制长度，可以由一系列Unicode的字符和数字组成，用<code class="highlighter-rouge">字母</code>，<code class="highlighter-rouge">$</code>和<code class="highlighter-rouge">_</code>都是被允许的，包括中文，技术上是不限制的，但是Java规范不建议用<code class="highlighter-rouge">$</code>和<code class="highlighter-rouge">_</code>作为开头。</li>
  <li>命名的尽量只用全称而非简称，写全称的代码可读性和可维护性都更好，好的命名，在很多情况下就是文档本身，另外需要注意，变量的名称不能为Java的关键词和保留字。</li>
  <li>变量名称涉及多个单词的，第二个单词开始开头字母大写，也就是驼峰命名法，例如<code class="highlighter-rouge">boxNumbers</code>。如果是常量或者不能改变的变量，所有字母都用大写，字母之间用<code class="highlighter-rouge">_</code>隔开，例如<code class="highlighter-rouge">BOX_CONFIG</code>。</li>
</ul>

<h2 id="参考">参考</h2>
<p><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html">The Java™ Tutorials</a></p>

	  ]]></description>
	</item>


</channel>
</rss>
