<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>meetmax.cn</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>IO模型浅析</title>
	  <link>//IO%E6%A8%A1%E5%9E%8B%E6%B5%85%E6%9E%90</link>
	  <author></author>
	  <pubDate>2018-07-27T01:00:00+08:00</pubDate>
	  <guid>//IO%E6%A8%A1%E5%9E%8B%E6%B5%85%E6%9E%90</guid>
	  <description><![CDATA[
	     <h2 id="同步阻塞io">同步阻塞IO</h2>
<p>系统的输入分为两个步骤：</p>
<ol>
  <li>等待数据报的到来</li>
  <li>将数据报从内核缓冲区复制到用户应用程序缓冲区</li>
</ol>

<p>同步阻塞IO在以上两个步骤上都是阻塞状态，这时候CPU处于空闲状态，不会分配时间片给用户线程。在实际场景下，同一时刻往往会有多个IO操作，同步阻塞IO不能同时处理多个IO，只能一个一个来，导致CPU资源被浪费。</p>

<h2 id="同步非阻塞io">同步非阻塞IO</h2>
<p>同步非阻塞IO比同步阻塞稍微好点，两者的区别是，在第一步调用<code class="highlighter-rouge">recvfrom</code>系统调用的时候，如果数据报还没有准备好会立即返回错误码<code class="highlighter-rouge">EAGAIN</code>或<code class="highlighter-rouge">EWOULDBLOCK</code>，并且一直轮询调用，直到数据报准备好时，执行第2步，第2步仍然是阻塞执行的，它的问题是会产生大量的系统调用，是很大的开销。</p>

<h2 id="io多路复用">IO多路复用</h2>
<p>多路复用和同步阻塞区别也是在第1步，当用户进程调用了<code class="highlighter-rouge">select</code>,<code class="highlighter-rouge">poll</code>或者<code class="highlighter-rouge">epoll</code>函数时，进程会监听文件描述符，当有数据报到来时，就执行第2步。多路复用在服务端编程中很常用，nginx、redis和nodeJs底层都使用了基于<code class="highlighter-rouge">epoll</code>的IO模型。它的优势是。<strong>1.</strong> 相对多线程而言，多个线程修改数据会产生静态条件，需要加锁处理。<strong>2.</strong>单线程模型避免了线程间切换的开销，可同时接受多个客户端的IO操作。<strong>3.</strong>事件驱动，当数据报准备好时才拷贝数据到用户控件，高效利用CPU资源。</p>

<h2 id="异步io">异步IO</h2>
<p>上面三种IO模型本质上都是同步的，因为在第2步的时候，数据报从内核缓冲区拷贝到用户进程的操作是阻塞的。异步IO和同步IO区别在于2步，当用户进程调用<code class="highlighter-rouge">aio_read</code>操作时就立刻返回，进程可以去做别的事情，1，2步操作都由内核帮你完成。当整个IO操作完成时，内核通过信号或回调函数的方式通知用户进程，这样1，2步都是非阻塞的。</p>


	  ]]></description>
	</item>

	<item>
	  <title>Unix进程间通信(IPC)</title>
	  <link>//UNIX-IPC</link>
	  <author></author>
	  <pubDate>2018-02-20T18:18:00+08:00</pubDate>
	  <guid>//UNIX-IPC</guid>
	  <description><![CDATA[
	     <h3 id="ipc概念">IPC概念:</h3>
<blockquote>
  <p><strong>进程间通信</strong>（<strong>IPC</strong>，<em>Inter-Process Communication</em>），指至少两个<a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B">进程</a>或<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B">线程</a>间传送数据或信号的一些技术或方法。进程是<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F">计算机系统</a>分配资源的最小单位(严格说来是线程)。每个进程都有自己的一部分独立的系统资源，彼此是隔离的。为了能使不同的进程互相访问资源并进行协调工作，才有了进程间通信。举一个典型的例子，使用进程间通信的两个应用可以被分类为客户端和服务器（见<strong>主从式架构</strong>），客户端进程请求数据，服务端回复客户端的数据请求。有一些应用本身既是服务器又是客户端，这在<strong>分布式计算</strong>中，时常可以见到。这些<a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B">进程</a>可以运行在同一计算机上或网络连接的不同计算机上。</p>

  <p>进程间通信技术包括消息传递、同步、共享内存和<a href="https://zh.wikipedia.org/wiki/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8">远程过程调用</a>。IPC是一种标准的<a href="https://zh.wikipedia.org/wiki/Unix">Unix</a>通信机制。</p>

  <p>使用IPC 的理由：</p>

  <ul>
    <li>信息共享：<strong>Web服务器</strong>，通过<strong>网页浏览器</strong>使用进程间通信来共享web文件（网页等）和多媒体；</li>
    <li>加速：维基百科使用通过进程间通信进行交流的多服务器来满足用户的请求；</li>
    <li>模块化;</li>
    <li>私有权分离.</li>
  </ul>

  <p>与直接共享内存地址空间的<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程编程</a>相比，IPC的缺点：[<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B%E9%96%93%E9%80%9A%E8%A8%8A#cite_note-1">1]</a></p>

  <ul>
    <li>采用了某种形式的内核开销，降低了性能;</li>
    <li>几乎大部分IPC都不是程序设计的自然扩展，往往会大大地增加程序的复杂度。</li>
  </ul>
</blockquote>

<h2 id="一管道">一、管道</h2>

<h4 id="1特点">1、特点：</h4>

<ol>
  <li>
    <p>管道是一种半双工的通信方式(即数据只能单向流动)，也有部分系统上实现了全双工的管道，出于程序可移植性考虑，建议使用半双工管道，全双工的通信可由其它方式实现，例如：消息队列，Unix域套接字。</p>
  </li>
  <li>
    <p>管道分为两种，无名管道和有名管道。</p>

    <ul>
      <li><strong>无名管道：</strong></li>
    </ul>

    <p>最早出现的管道是没有名字的，因此只能用于父子进程间通信，父进程通过<code class="highlighter-rouge">fork()</code>系统调用创建一个子进程，然后通过管道通信。</p>

    <ul>
      <li><strong>有名管道(FIFO):</strong></li>
    </ul>

    <p>有名管道也叫<strong>FIFO</strong>，由于磁盘中存在实际的管道文件，前者没有，所以叫有名管道。<code class="highlighter-rouge">FIFO</code>的意思是(first in ,first out)，先进先出。FIFO是一个(单向的)半双工数据流，不同于普通管道的是，每个FIFO都有一个对应文件的路径名与之关联，因此它能完成多个无亲缘关系进程之间的通信。</p>
  </li>
  <li>
    <p>FIFO和无名管道的数据都存在内核的内存缓冲区中，大小一般为一页(4K)。不同的是，FIFO将内核缓冲区的数据映射到了实际的文件节点，可以在磁盘中看到对应的文件，所以叫<strong>有名管道</strong>，而无名管道在磁盘中没有对应文件，因此称<strong>无名管道</strong>。</p>
  </li>
  <li>
    <p>无名管道通过<code class="highlighter-rouge">&lt;unistd.h&gt;</code>头文件中的<code class="highlighter-rouge">pipe()</code>创建，有名管道(FIFO)通过<code class="highlighter-rouge">&lt;sys/stat.h&gt;</code>中的<code class="highlighter-rouge">mkfifo()</code>创建。</p>
  </li>
  <li>
    <p>管道通过<code class="highlighter-rouge">read()</code>和<code class="highlighter-rouge">write()</code>进行读写操作，管道内核缓冲区中的数据一旦被取走，管道中将不存在。当内核缓冲区满的时候，<code class="highlighter-rouge">write()</code>写操作将被阻塞，直到缓冲区有空闲再继续。同理，当缓冲区数据为空时，<code class="highlighter-rouge">read()</code>操作将阻塞，直到有新数据时再返回。</p>
  </li>
  <li>
    <p>当进程终止时，管道就完全被删除了。</p>
  </li>
</ol>

<ul>
  <li>###无名管道</li>
</ul>

<h4 id="1过程">1、过程</h4>

<ol>
  <li>
    <p>创建管道</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;unistd.h&gt;
</span><span class="n">pipe</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> 
</code></pre></div>    </div>
  </li>
  <li>
    <p>通过<code class="highlighter-rouge">fork()</code>创建子进程</p>

    <pre><code class="language-C">// 返回值 &gt;=0:成功 &lt;0:错误
// 如果是父进程则返回子进程 id,子进程则返回 0
fork()
</code></pre>
  </li>
  <li>
    <p><code class="highlighter-rouge">read()</code>和<code class="highlighter-rouge">write()</code>读写缓冲区的数据</p>
  </li>
</ol>

<h4 id="2例子">2、例子</h4>

<ul>
  <li><em>pipe.c</em></li>
</ul>

<pre><code class="language-C">#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    int fd[2];	// 管道描述符
    pid_t pid;	// 进程id
    char buff[20];	// 缓冲区长度
    if(pipe(fd) &lt; 0){
        printf("创建管道失败\n");
    }
    pid = fork();	// 创建子进程
    if(pid &lt; 0){
        printf("fork()失败\n");
    }else if (pid &gt; 0){	// 大于0为主进程
        close(fd[0]);	// 关闭主进程读端
        write(fd[1],"hello world\n",12);
    }else{ 	// 小于0为子进程
        close(fd[1]); 	// 关闭子进程写端
        sleep(2);
		read(fd[0], buff, 20);
		printf("读到的数据：%s\n", buff);
    }
    return 0;
}
</code></pre>

<ul>
  <li>
    <h3 id="有名管道fifo">有名管道FIFO</h3>
  </li>
</ul>

<h4 id="1过程-1">1、过程</h4>

<ol>
  <li>按以下示例，先运行<code class="highlighter-rouge">read_fifo.c</code>，创建管道文件(<strong>注意:</strong> 此时管道文件必须不存在，否则会出错)。</li>
  <li>因为此时管道中还没有数据，<code class="highlighter-rouge">read()</code>处于阻塞状态，等待数据。</li>
  <li>再运行<code class="highlighter-rouge">write_fifo.c</code>，向管道中写入数据，此时<code class="highlighter-rouge">read()</code>打印<code class="highlighter-rouge">write_fifo.c</code>写入的数据。</li>
</ol>

<h4 id="2例子-1">2、例子</h4>

<ul>
  <li><em>read_fifo.c</em></li>
</ul>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;time.h&gt;
#include &lt;sys/stat.h&gt;

int main()
{
    int fd,len;
    char buff[1024];	//管道缓冲区大小
  if(mkfifo("/Users/meetmax/CWork/fifo1", 0666) &lt; 0)
  {		// 创建FIFO管道,此时`fif01`文件必须不存在，否则报错
    	perror("Create FIFO Failed");
    	exit(1);
  } 
  
	if((fd = open("/Users/meetmax/CWork/fifo1", O_RDONLY)) &lt; 0) 
	{ 	// 以只读模式打开FIFO，和打开普通文件一样
		perror("Open FIFO Failed");
		exit(1);
	}
	 // 如果管道中有数据，读取FIFO管道
	while((len = read(fd, buff, 1024)) &gt; 0)
		printf("Read message: %s", buff);

	close(fd);  // 关闭FIFO文件
	return 0;
}
</code></pre>

<ul>
  <li><em>write_fifo.c</em></li>
</ul>

<pre><code class="language-C">#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;   // exit
#include&lt;fcntl.h&gt;    // O_WRONLY
#include&lt;sys/stat.h&gt;
#include&lt;time.h&gt;     // time
#include &lt;time.h&gt;

int main()
{
	int fd;
	int n, i;
	char buf[1024];
	time_t tp;

	printf("I am %d process.\n", getpid()); // 说明进程ID
	
	if((fd = open("/Users/meetmax/CWork/fifo1", O_WRONLY)) &lt; 0) 
      // 以写打开一个FIFO 
	{
		perror("Open FIFO Failed");
		exit(1);
	}

	for(i=0; i&lt;10; ++i)
	{
		time(&amp;tp);  // 取系统当前时间
		n=sprintf(buf,"Process %d's time is %s",getpid(),ctime(&amp;tp));
		printf("Send message: %s", buf); //	打印
		if(write(fd, buf, n+1) &lt; 0)  // 写入到FIFO中
		{
			perror("Write FIFO Failed");
			close(fd);
			exit(1);
		}
		sleep(1);  // 休眠1秒
	}

	close(fd);  // 关闭FIFO文件
	return 0;
}
</code></pre>

<h2 id="xis-ipc基于system-v-的ipc函数">XIS IPC(基于System V 的IPC函数)</h2>

<p>除管道外，还有3种IPC的进程间的通信，分别为：消息队列、信号量和共享内存。这3个IPC有两种实现方式，分别为基于<strong>System V</strong>和<strong>POSIX</strong>的进程间通信。</p>

<ul>
  <li><em>维基百科</em></li>
</ul>

<p><strong>System V</strong></p>

<blockquote>
  <p><strong>UNIX系统五</strong>[<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90">来源请求]</a>（英语：UNIX System V），是<a href="https://zh.wikipedia.org/wiki/Unix">Unix</a><a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>众多版本中的一支。它最初由<a href="https://zh.wikipedia.org/wiki/AT%26T">AT&amp;T</a>开发，在1983年第一次发布，因此也被称为<strong>AT&amp;T System V</strong>。</p>
</blockquote>

<p><strong>POSIX</strong></p>

<blockquote>
  <p><strong>可移植操作系统接口</strong>（英语：Portable Operating System Interface，缩写为<strong>POSIX</strong>），是<a href="https://zh.wikipedia.org/wiki/IEEE">IEEE</a>为要在各种<a href="https://zh.wikipedia.org/wiki/UNIX">UNIX</a><a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>上运行软件，而定义<a href="https://zh.wikipedia.org/wiki/API">API</a>的一系列互相关联的标准的总称，其正式称呼为IEEE Std 1003，而国际标准名称为<a href="https://zh.wikipedia.org/wiki/ISO">ISO</a>/<a href="https://zh.wikipedia.org/wiki/IEC">IEC</a> 9945。</p>
</blockquote>

<p>System V 出现比 POSIX 要早，可以说POSIX是对System V的改进，POSIX API使用比前者更加简单高效，但是为什么两者仍然同时存在呢？还是一个移植性的问题，虽然现在新的程序都基于POSIX标准，但是仍然有很多旧的程序使用了基于System V的IPC，因此两者都保留了。本文的IPC基于System V的IPC函数。</p>

<h2 id="二消息队列">二、消息队列</h2>

<h3 id="1特点-1">1、特点</h3>

<ol>
  <li>消息队列是消息的链表，存储在内核中，由消息队列标识符标识。</li>
  <li>消息队列是随内核持续的，进程终止时，消息队列及其内容不会被删除，除非内核重启或者调用<code class="highlighter-rouge">msgctl()</code>显式的删除消息队列。</li>
  <li>消息队列没有维护引用计数器(打开文件有这种计数器)，所以队列被删除后，仍在使用该队列的进程会出错返回。</li>
</ol>

<h3 id="2过程">2、过程</h3>

<ol>
  <li>先定义消息队列结构<code class="highlighter-rouge">struct msg_form</code>，每条消息都包含：
    <ul>
      <li>消息队列类型：<code class="highlighter-rouge">long</code>类型的<code class="highlighter-rouge">mtype</code></li>
      <li>消息数据：<code class="highlighter-rouge">char *</code>类型的字符串</li>
    </ul>
  </li>
  <li>通过文件的路径名和项目ID(0~255之间)，调用<code class="highlighter-rouge">ftok()</code>获取IPC，获取key值。创建<code class="highlighter-rouge">XSI IPC</code>结构都应指定一个键，这个键的数据类型是系统数据类型key_t，通常在头文件<code class="highlighter-rouge">&lt;sys/types.h&gt;</code>中定义。</li>
  <li>接着调用<code class="highlighter-rouge">msgget()</code>函数，使用key作为其中一个参数，由内核将<code class="highlighter-rouge">key</code>变成IPC的标识符，在这里就是消息队列ID。</li>
  <li>拿到IPC标识符后，通过<code class="highlighter-rouge">msgsnd()</code>和<code class="highlighter-rouge">msgrcv()</code>分别发送和接收消息。</li>
</ol>

<h3 id="3示例">3、示例</h3>

<ul>
  <li><em>msg_client.c</em></li>
</ul>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;unistd.h&gt;


#define MSG_FILE "/Users/meetmax/CWork/msg_file"

// 消息结构
struct msg_form {
    long mtype;    
	char mtext[256];
};

int main(){
    int msqid;	// 消息队列id
    key_t key;	// 键值
    struct msg_form msg;

    //获取key值
    if((key = ftok(MSG_FILE,100)) &lt; 0){
        perror("获取key值失败\n");
        exit(0);
    }

    printf("key 值为： %d",key);

    if((msqid = msgget(key,IPC_CREAT|0777)) &lt; 0){
        perror("获取消息队列失败");
        exit(0);
    }
    printf("消息队列id: %d \n",msqid);
    printf("进程id: %d \n",getpid());

    msg.mtype = 888;	// 设置消息类型
    sprintf(msg.mtext,"hello,I'm client %d\n",getpid());
    msgsnd(msqid,&amp;msg,sizeof(msg.mtext),0);

    // 获取777类型的消息
	msgrcv(msqid, &amp;msg, 256, 999, 0);
	printf("Client: receive msg.mtext is: %s.\n", msg.mtext);
	printf("Client: receive msg.mtype is: %ld.\n", msg.mtype);
	return 0;
}
</code></pre>

<ul>
  <li><em>msg_server.c</em></li>
</ul>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/msg.h&gt;
#include &lt;unistd.h&gt;

#define MSG_FILE "/Users/meetmax/CWork/msg_file"
struct msg_form{
    long mtype;
    char mtext[256];
};
int main()
{
    int msqid;
    key_t key;
    struct msg_form msg;
    //获取key值
    if((key = ftok(MSG_FILE,100)) &lt; 0){
        perror("获取key失败");
        exit(1);
    }
    //打印key值
    printf("key的值为 %d \n",key);
    //根据key值创建消息队列
    if((msqid = msgget(key,IPC_CREAT|0777)) &lt; 0){
        perror("创建消息队列失败");
        exit(1);
    }
    printf("消息队列id为 : %d \n",msqid);
    printf("进程id为 : %d \n",getpid());
    while(1)
    {
        //接受888类型的消息        
        msgrcv(msqid,&amp;msg,256,888,0);
        printf("Server:receive msg.mtext: %s \n",msg.mtext);
        printf("Server:receive msg.xxx: %ld \n",msg.mtype);
        msg.mtype = 999;
        sprintf(msg.mtext,"hello I'm server: %d \n",getpid());
        //发送消息
        msgsnd(msqid,&amp;msg,sizeof(msg.mtext),0);
    }
    return 0;
}
</code></pre>

<h2 id="三信号量">三、信号量</h2>

<h3 id="1特点-2">1、特点</h3>

<ol>
  <li>
    <p>信号量类似锁机制，能够使临界区内的资源在某一时刻只能被一个进程访问。临界区是指多个进程或线程共享的内存空间，在访问临界区的时候，多个进程操作同一个资源，此时就存在竞态条件，通常在两个进程对同一个资源写操作时，会产生结果不一致的问题，因为我们不知道系统进程何时切换，这种情况也很难复现和调试。必须有一种机制来保证在同一时刻只能有一个进程访问临界区，信号量就提供了这种机制。</p>
  </li>
  <li>
    <p>信号量是一种特殊的变量，程序对它的访问都是<strong>原子操作</strong>，所谓原子操作，即是指不可被中断的操作，要实现原子操作单纯软件是不够的。虽然也能实现，但是效率很低，信号量是一种和硬件紧密结合的机制，它不会被系统进程切换和中断操作打断。本文以<strong>二值信号量</strong>为例子，二值信号量能实现互斥锁的功能，保证同一时间只能一个进程访问资源。</p>
  </li>
  <li>
    <p>信号量的P,V操作</p>

    <p><em>来自维基百科</em></p>
  </li>
</ol>

<blockquote>
  <p>计数信号量具备两种操作动作，之前称为 V（又称signal()）与 P（wait()）。 V操作会增加信号量 S的数值，P操作会减少它。</p>

  <p>运作方式：</p>

  <ol>
    <li>初始化，给与它一个非负数的整数值。</li>
    <li>运行 P（wait()），信号量S的值将被减少。企图进入<a href="https://zh.wikipedia.org/wiki/%E8%87%A8%E7%95%8C%E5%8D%80%E6%AE%B5">临界区块</a>的进程，需要先运行 P（wait()）。当信号量S减为负值时，进程会被挡住，不能继续；当信号量S不为负值时，进程可以获准进入临界区块。</li>
    <li>运行 V（又称signal()），信号量S的值会被增加。结束离开<a href="https://zh.wikipedia.org/wiki/%E8%87%A8%E7%95%8C%E5%8D%80%E6%AE%B5">临界区块</a>的进程，将会运行 V（又称signal()）。当信号量S不为负值时，先前被挡住的其他进程，将可获准进入<a href="https://zh.wikipedia.org/wiki/%E8%87%A8%E7%95%8C%E5%8D%80%E6%AE%B5">临界区块</a>。</li>
  </ol>
</blockquote>

<h3 id="2过程-1">2、过程</h3>

<ol>
  <li>获取<code class="highlighter-rouge">key</code>值(同消息队列)</li>
  <li>获取信号量ID(同消息队列)</li>
  <li><code class="highlighter-rouge">semctl()</code>函数初始化信号量</li>
  <li><code class="highlighter-rouge">fork()</code>子进程</li>
  <li>执行P,V操作</li>
</ol>

<h3 id="3例子">3、例子</h3>

<p><em>sem.c 二值信号量</em></p>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/sem.h&gt; // 信号量函数库
#include &lt;unistd.h&gt;

#define SEM_FILE "/Users/meetmax/CWork/sem_file" // 信号量文件

union sem_union //信号量联合
{
    int val;
    struct semid_ds *buf;
    unsigned short *array;
};

//初始化信号量
int init_sem(int sem_id,int val)
{
    union sem_union tmp;
    tmp.val = val;
    if((semctl(sem_id,0,SETVAL,tmp)) == -1)
    {
        perror("初始化信号量失败");
        return -1;
    }
    return 0;
}

/**
 * P操作
 * 信号量大于0时执行 -1 操作，获取资源
 * 若信号量 &lt;= 0 则挂起等待
*/
int sem_p(int sem_id)
{
    struct sembuf sbuf;
    sbuf.sem_num = 0;
    sbuf.sem_op = -1;
    sbuf.sem_flg = SEM_UNDO;
    if(semop(sem_id,&amp;sbuf,1) == -1)
    {
        perror("p操作失败");
        return -1;
    }
    return 0;
}

/**
 * V操作
 * 信号量 &lt;= 0时执行，+1操作，释放资源
 * 若信号量 &gt; 0 时挂起等待
 */
int sem_v(int sem_id)
{
    struct sembuf sbuf;
    sbuf.sem_num = 0;
    sbuf.sem_op = 1;
    sbuf.sem_flg = SEM_UNDO;
    if(semop(sem_id,&amp;sbuf,1) == -1)
    {
        perror("V操作失败");
        return -1;
    }
    return 0;
}

//删除信号量
int sem_del(int sem_id)
{
    union sem_union tmp;
    if(semctl(sem_id,0,IPC_RMID,tmp) == -1)
    {
        perror("删除信号量失败");
        return -1;
    }
    return 0;
}

int main()
{
    int sem_id;
    key_t key;
    pid_t pid;

    //获取key值
    if((key = ftok(SEM_FILE,100)) == -1)
    {
        perror("获取key值失败");
        exit(1);
    }
    //获取信号量id
    if((sem_id = semget(key,1,IPC_CREAT|0666)) == -1)
    {
        perror("信号量id获取失败");
        exit(1);
    }

    //初始化信号量
    init_sem(sem_id,0);

    //fork进程
    if((pid = fork()) == -1)
    {
        perror("进程fork失败");
        exit(1);
    }else if(pid == 0){ //子进程
        printf("我是子进程：%d \n",getpid());
        sleep(2);
        sem_v(sem_id);
    }else if(pid &gt; 0){ //父进程
        sem_p(sem_id);
        printf("我是父进程：%d \n",getpid());
        sem_v(sem_id);
        sem_del(sem_id);
    }
    return 0;
}
</code></pre>

<h2 id="四共享内存">四、共享内存</h2>

<h3 id="1特点-3">1、特点</h3>

<p><em>概念</em></p>

<blockquote>
  <p>顾名思义，共享内存就是允许两个不相关的进程访问同一个逻辑内存。共享内存是在两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常安排为同一段物理内存。进程可以将同一段共享内存连接到它们自己的地址空间中，所有进程都可以访问共享内存中的地址，就好像它们是由用C语言函数malloc分配的内存一样。而如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。</p>
</blockquote>

<h3 id="2过程-2">2、过程</h3>

<ol>
  <li><code class="highlighter-rouge">ftko()</code>获取key值(同消息队列)</li>
  <li>用<code class="highlighter-rouge">shmget()</code>函数获取共享内存ID</li>
  <li>进程通过<code class="highlighter-rouge">shmat()</code>函数连接共享内存</li>
  <li>访问共享内存</li>
</ol>

<h3 id="3示例-1">3、示例</h3>

<p><em>shm_server.c 读数据</em></p>

<pre><code class="language-C">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/shm.h&gt;
#include &lt;string.h&gt;

#define SHM_FILE "/Users/meetmax/CWork/shm_file"

int main()
{
    int shm_id;
    key_t key;
    char * shm;
    struct shmid_ds buf;
	// 获取key
    if((key = ftok(SHM_FILE,100)) == -1)
    {
        perror("获取key失败");
        exit(0);
    }
	// 获取共享内存描述符ID
    if((shm_id = shmget(key,512,IPC_CREAT|0666)) == -1)
    {
        perror("获取共享内存id失败");
        exit(0);
    }
	// 连接共享内存
    if((int)(shm = (char *)shmat(shm_id,0,0)) == -1)
    {
        perror("连接共享内存失败");
        exit(1);
    }
    printf("开始接收数据\n");
  
    // 开始忙等，接收数据
    while(1)
    {
        if(strlen(shm) &gt; 0){
            printf("收到数据：%s \n",shm);
            sprintf(shm,"");
        }
        if(strcmp(shm,"r") == 0){
            printf("已退出\n");
            break;
        }
    }
    // 删除共享内存
    shmctl(shm_id,IPC_RMID,&amp;buf);
    return 0;

}
</code></pre>

<p><em>sem_client.c 写入数据</em></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/shm.h&gt;
</span>
<span class="cp">#define SHM_FILE "/Users/meetmax/CWork/shm_file"
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">shm_id</span><span class="p">;</span>
    <span class="n">key_t</span> <span class="n">key</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span> <span class="n">shm</span><span class="p">;</span>
   
	<span class="c1">// 获取key
</span>    <span class="k">if</span><span class="p">((</span><span class="n">key</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="n">SHM_FILE</span><span class="p">,</span><span class="mi">100</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"获取key失败"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
	<span class="c1">// 获取共享内存id
</span>    <span class="k">if</span><span class="p">((</span><span class="n">shm_id</span> <span class="o">=</span> <span class="n">shmget</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="n">IPC_CREAT</span><span class="o">|</span><span class="mo">0666</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"获取共享内存id失败"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
	<span class="c1">// 连接共享内存，若不存在则创建
</span>    <span class="k">if</span><span class="p">((</span><span class="kt">int</span><span class="p">)(</span><span class="n">shm</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">shmat</span><span class="p">(</span><span class="n">shm_id</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>   
    <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"连接共享内存失败"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"请输入："</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span><span class="n">shm</span><span class="p">);</span> <span class="c1">// 写入数据到共享内存
</span>    <span class="n">shmdt</span><span class="p">(</span><span class="n">shm</span><span class="p">);</span> <span class="c1">// 断开连接
</span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="参考">参考</h2>

<ul>
  <li><em>《UNIX环境高级编程》</em></li>
  <li><em>《UNIX网络编程：卷2》</em></li>
  <li>部分来自互联网</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
